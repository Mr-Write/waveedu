server:
  port: 9901
  max-http-header-size: 2MB
  servlet:
    context-path: /share
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://8.134.136.211:3306/wave_edu?characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 指定数据源
    type: com.alibaba.druid.pool.DruidDataSource
    # Spring Boot 默认是不注入这些属性值的，需要自己绑定
    # druid 数据源专有配置
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
  application:
    name: waveedu-share
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  mvc:
    hiddenmethod:
      filter:
        enabled: true # 启用HiddenHttpMethodFilter,支持rest风格
  redis:
    host: 8.134.136.211
    port: 6379
    password: 123456
    lettuce:
      pool:
        max-active: 10
        max-idle: 10
        min-idle: 1
        time-between-eviction-runs: 10s
    database: 0
  main:
    allow-circular-references: true # 允许循环依赖
#  rabbitmq:
#    host: 8.134.136.211
#    port: 5672
#    username: root
#    password: root
#    virtual-host: /
#    listener:
#      simple:
#        prefetch: 1  # 监听器一次只能拿一条消息，处理完一条马上可以拿下一条
#        acknowledge-mode: auto # 自动签收模式，如果监听的方法没有出现异常，就会自动签收。如果出现异常，那么消息就会回到队列当中
#        retry:
#          enabled: true # 开启消费者失败重试机制
#          initial-interval: 1000 # 第一次消费失败后等待的时间，单位 ms
#          multiplier: 3 # 等待时间的倍数，即下一次等待的时间 = 等待时间倍数(multiplier) * 最后一次等待的时间间隔
#          max-attempts: 4 # 失败之后总共消费的次数（包含第一次），即重试3次
#          stateless: true # true无状态；false有状态。如果业务中包含事务，改为false
#    # 开启生产者的消息确认机制:
#    # 默认值是none，就是关闭消息的确认机制。
#    # simple 发送消息的时候是 同步调用 的方式。
#    # correlated 是异步调用。
#    publisher-confirm-type: correlated
#    # 开启生产者的消息回执：消息投递到交换机了，但是没有路由到队列。返回ACK，以及路由失败原因。
#    publisher-returns: true
#    template:
#      # true ,消息从交换机到队列的时候，如果发送失败会回调你的函数。如果是false，消息从交换机到队列的时候如果是失败直接丢弃
#      mandatory: true
mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      id-type: assign_id # 使用雪花算法生成id
      logic-delete-value: 1 # 逻辑已删除值
      logic-not-delete-value: 0 # 逻辑未删除值
  configuration:
    # 这里我们配置出底层的sql，可以输出sql日志信息，方便我们观察
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#sms:
#  # 应用的AppID
#  appId: 1400791280
#  # 应用的App Key
#  appKey: cbd511ed24bd832d05af54f63c84e52d
#  # 签名的内容
#  signContent: 狐狸半面添公众号
#  # 登录&注册短信模板的id
#  loginTemplateId: 1671035









